//
//  VOPRefund.swift
//  TXMTestingTool
//
//  Created by Mick Latham on 02/12/2021.
//  Copyright Â© 2021 Bink. All rights reserved.
//

import Foundation

struct VOPRefundProvider: Provider {

    // MARK: - Protocol Implementation

    func provide(_ transactions: [Transaction], merchant: MerchantAgent, paymentProvider: PaymentAgent) throws -> String {
        let visaTransactions = transactions.map {
            VOPRefundTransaction(
                withTransaction: $0,
                forMerchant: merchant,
                transactionDateFormatter: dateFormatter
            )
        }

        let data = try jsonEncoder.encode(visaTransactions)
        return String(data: data, encoding: .utf8)!
    }

    // MARK: - Properties

    var defaultFileName = "visa-vop-refund.json"
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.timeZone = TimeZone(abbreviation: "UTC")
        formatter.dateFormat = "M/d/YYYY h:m:s a"
        formatter.amSymbol = "AM"
        formatter.pmSymbol = "PM"
        return formatter
    }()
    
    private let jsonEncoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
        return encoder
    }()
    
}

struct VOPRefundTransaction: Codable {
    
    // MARK: - Helpers
    
    /// An item that can appear in a VOP transaction
    struct VOPElement: Codable {
        let key: String
        let value: String
        
        init(_ key: String, _ value: String) {
            self.key = key
            self.value = value
        }
        
        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }
    
    // MARK: - Properties
    
    let cardId: String
    let externalUserId: String
    var messageElementsCollection: [VOPElement]
    let messageId: String
    let messageName: String
    let userDefinedFieldsCollection: [VOPElement]
    let userProfileId: String
    
    // MARK: - Initialisation
    
    init(withTransaction transaction: Transaction, forMerchant merchant: MerchantAgent, transactionDateFormatter: DateFormatter) {
        cardId = transaction.settlementKey      // Unique ID of the card, generated by Visa & returned when registered to the user
        externalUserId = transaction.cardToken  // Unique External User ID which is returned from when a user is enrolled
        messageId = UUID().uuidString           // Unique identifier for each End Point Message request generated by Visa.
        messageName = "AuthMessageTest"         // Message Name for the EPM generated by Visa.
        userProfileId = UUID().uuidString       // Unique user record identifier generated by Visa as a part of Enroll response.
        
        
        let transactionAmount = String(format: "%.02f", Double(transaction.amount) / 100.0)
        let transactionDate = transactionDateFormatter.string(from: transaction.date)
        
        messageElementsCollection = [
            VOPElement("ReturnTransaction.CardAcceptorIdCode", transaction.mid),   // AKA MID, assigned by Acquirer for every merchant outlet
            VOPElement("ReturnTransaction.AcquirerBIN", "3423432"),                // 6 digit BIN assigned by the acquirer to the merchant
            VOPElement("ReturnTransaction.Amount", transactionAmount),             // Value in transaction currency with a dot delimiter
            VOPElement("ReturnTransaction.VipTransactionId", transaction.id),      // IMPORTANT - Provides a numeric ID linking AUTH and SETTLE
            VOPElement("ReturnTransaction.SettlementId", transaction.id),          // IMPORTANT - Provides a numeric ID linking AUTH and SETTLE
            VOPElement("ReturnTransaction.VisaMerchantName", ""),                  // Visa assigned name of merchant. Note: Do not use for now
            VOPElement("ReturnTransaction.VisaMerchantId", ""),                    // Visa assigned numeric ID of merchant. Note: Do not use for now
            VOPElement("ReturnTransaction.VisaStoreName", ""),                     // Visa assigned ID for the specific outlet. Note: Do not use for now
            VOPElement("ReturnTransaction.VisaStoreId", ""),                       // Visa assigned numeric ID for the outlet. Note: Do not use for now
            VOPElement("ReturnTransaction.AcquirerAmount", transactionAmount),     // Visa assigned numeric ID for the outlet. Note: Do not use for now
            VOPElement("ReturnTransaction.AcquirerCurrencyCode", "840"),           // Visa assigned numeric ID for the outlet. Note: Do not use for now
            VOPElement("ReturnTransaction.CurrencyCode", "840"),                       // Numeric ISO 4217 code for the currency
            VOPElement("ReturnTransaction.TransactionUSDAmount", transactionAmount),   // IMPORTANT - Referenced in example but not documented
            VOPElement("ReturnTransaction.DateTime", transactionDate),                    // The local date (no time) of the transaction.
            VOPElement("ReturnTransaction.MerchantGroup.0.Name", merchant.slug.uppercased()), // Merchant name, during the merchant on-boarding process.
            VOPElement("ReturnTransaction.MerchantGroupName.0.ExternalId", merchant.prettyName),  // External MID or a name.
            VOPElement("ReturnTransaction.AuthCode", transaction.authCode),                   // An issuer generated value upon approving a transaction
        ]
        
        userDefinedFieldsCollection = [
            VOPElement("TransactionType", "return")
        ]
    }
    
    private enum CodingKeys: String, CodingKey {
        case cardId = "CardId"
        case externalUserId = "ExternalUserId"
        case messageElementsCollection = "MessageElementsCollection"
        case messageId = "MessageId"
        case messageName = "MessageName"
        case userDefinedFieldsCollection = "UserDefinedFieldsCollection"
        case userProfileId = "UserProfileId"
    }

}
