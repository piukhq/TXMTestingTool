//
//  VOPTransaction.swift
//  TXMTestingTool
//
//  Created by Jack Rostron on 11/05/2020.
//  Copyright Â© 2020 Bink. All rights reserved.
//

import Foundation

/// A representation of a VOP transaction. Can support rendering both AUTH and SETTLE
struct VOPTransaction: Codable {
    
    // MARK: - Helpers
    
    /// An item that can appear in a VOP transaction
    struct VOPMessageElement: Codable {
        let key: String
        let value: String
    }
    
    // MARK: - Properties
    
    let cardId: String
    let externalUserId: String
    var messageElementsCollection: [VOPMessageElement]
    let messageId: String
    let messageName: String
    let userDefinedFieldsCollection: [VOPMessageElement]
    let userProfileId: String
    
    // MARK: - Initialisation
    
    init(withTransaction transaction: Transaction, type: TransactionType, forMerchant merchant: Agent, transactionDateFormatter: DateFormatter, merchantPurchaseDateFormatter: DateFormatter) {
        cardId = transaction.cardToken      // Unique ID of the card, generated by Visa & returned when registered to the user
        externalUserId = UUID().uuidString  // Unique External User ID which is returned from when a user is enrolled
        messageId = UUID().uuidString       // Unique identifier for each End Point Message request generated by Visa.
        messageName = "AuthMessageTest"     // Message Name for the EPM generated by Visa.
        userProfileId = ""                  // Unique user record identifier generated by Visa as a part of Enroll response.
        
        let transactionAmount = String(format: "%.02f", Double(transaction.amount) / 100.0)
        let transactionDate = transactionDateFormatter.string(from: transaction.date)
        let storeName = "Bink Shop"
        let merchantDate = merchantPurchaseDateFormatter.string(from: transaction.date)
        
        messageElementsCollection = [
            VOPMessageElement(key: "Transaction.BillingAmount", value: transactionAmount),
            VOPMessageElement(key: "Transaction.TimeStampYYMMDD", value: transactionDate),
            VOPMessageElement(key: "Transaction.MerchantCardAcceptorId", value: "32423 ABC"),
            VOPMessageElement(key: "Transaction.MerchantAcquirerBin", value: "3423432"),
            VOPMessageElement(key: "Transaction.TransactionAmount", value: transactionAmount),
            VOPMessageElement(key: "Transaction.VipTransactionId", value: transaction.id),
            VOPMessageElement(key: "Transaction.VisaMerchantName", value: storeName),
            VOPMessageElement(key: "Transaction.VisaMerchantId", value: transaction.mid),
            VOPMessageElement(key: "Transaction.VisaStoreName", value: storeName),
            VOPMessageElement(key: "Transaction.VisaStoreId", value: transaction.mid),
            VOPMessageElement(key: "Transaction.CurrencyCodeNumeric", value: "840"),
            VOPMessageElement(key: "Transaction.BillingCurrencyCode", value: "840"),
            VOPMessageElement(key: "Transaction.USDAmount", value: transactionAmount),
            VOPMessageElement(key: "Transaction.MerchantLocalPurchaseDate", value: merchantDate),
            VOPMessageElement(key: "Transaction.MerchantGroup.0.Name", value: merchant.slug.uppercased()),  // Merchant name, during the merchant on-boarding process.
            VOPMessageElement(key: "Transaction.MerchantGroup.0.ExternalId", value: merchant.prettyName),   // External Merchant ID or a name, during the merchant on-boarding process.
            VOPMessageElement(key: "Transaction.AuthCode", value: transaction.settlementKey),
            VOPMessageElement(key: "Transaction.PanLastFour", value: transaction.lastFour),
        ]
                
        let transactionTypeValue: String
        
        switch type {
        case .auth:
            messageElementsCollection.append(contentsOf: [
                VOPMessageElement(key: "Transaction.SettlementDate", value: ""),
                VOPMessageElement(key: "Transaction.SettlementAmount", value: "0"),
                VOPMessageElement(key: "Transaction.SettlementCurrencyCodeNumeric", value: "0"),
                VOPMessageElement(key: "Transaction.SettlementBillingAmount", value: "0"),
                VOPMessageElement(key: "Transaction.SettlementBillingCurrency", value: ""),
                VOPMessageElement(key: "Transaction.SettlementUSDAmount", value: "0"),
                VOPMessageElement(key: "Transaction.MerchantDateTimeGMT", value: "")
            ])
            transactionTypeValue = "AUTH"
            
        case .settlement:
            messageElementsCollection.append(contentsOf: [
                VOPMessageElement(key: "Transaction.SettlementDate", value: transactionDateFormatter.string(from: Date())),
                VOPMessageElement(key: "Transaction.SettlementAmount", value: transactionAmount),
                VOPMessageElement(key: "Transaction.SettlementCurrencyCodeNumeric", value: "826"),
                VOPMessageElement(key: "Transaction.SettlementBillingAmount", value: transactionAmount),
                VOPMessageElement(key: "Transaction.SettlementBillingCurrency", value: "GBP"),
                VOPMessageElement(key: "Transaction.SettlementUSDAmount", value: transactionAmount),
                VOPMessageElement(key: "Transaction.MerchantDateTimeGMT", value: transactionDate)
            ])
            transactionTypeValue = "SETTLE"
        }
        
        userDefinedFieldsCollection = [
            VOPMessageElement(key: "TransactionType", value: transactionTypeValue)
        ]
    }
}
