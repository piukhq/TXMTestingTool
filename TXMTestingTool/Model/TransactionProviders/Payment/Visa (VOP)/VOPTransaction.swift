//
//  VOPTransaction.swift
//  TXMTestingTool
//
//  Created by Jack Rostron on 11/05/2020.
//  Copyright © 2020 Bink. All rights reserved.
//

import Foundation

/// A representation of a VOP transaction. Can support rendering both AUTH and SETTLE
struct VOPTransaction: Codable {
    
    // MARK: - Helpers
    
    /// An item that can appear in a VOP transaction
    struct VOPElement: Codable {
        let key: String
        let value: String
        
        init(_ key: String, _ value: String) {
            self.key = key
            self.value = value
        }
    }
    
    // MARK: - Properties
    
    let cardId: String
    let externalUserId: String
    var messageElementsCollection: [VOPElement]
    let messageId: String
    let messageName: String
    let userDefinedFieldsCollection: [VOPElement]
    let userProfileId: String
    
    // MARK: - Initialisation
    
    init(withTransaction transaction: Transaction, type: TransactionType, forMerchant merchant: MerchantAgent, transactionDateFormatter: DateFormatter, merchantPurchaseDateFormatter: DateFormatter) {
        cardId = transaction.settlementKey      // Unique ID of the card, generated by Visa & returned when registered to the user
        externalUserId = transaction.cardToken  // Unique External User ID which is returned from when a user is enrolled
        messageId = UUID().uuidString           // Unique identifier for each End Point Message request generated by Visa.
        messageName = "AuthMessageTest"         // Message Name for the EPM generated by Visa.
        userProfileId = UUID().uuidString       // Unique user record identifier generated by Visa as a part of Enroll response.
        
        /*
         Note from VOP documentation:
         Certain fields which are not relevant to the respective data stream may come through as empty/null/place-holder-value/0.
         As a simple rule, field-names beginning with “Settlement” will only contain values for data stream type SETTLE.
         
         Fields marked as not to use for now:
         Transaction.VisaMerchantName
         Transaction.VisaMerchantId
         Transaction.VisaStoreName
         Transaction.VisaStoreId
         */
        
        let transactionAmount = String(format: "%.02f", Double(transaction.amount) / 100.0)
        let transactionDate = transactionDateFormatter.string(from: transaction.date)
        let merchantDate = merchantPurchaseDateFormatter.string(from: transaction.date)
        
        messageElementsCollection = [
            VOPElement("Transaction.MerchantCardAcceptorId", transaction.mid),          // AKA MID, assigned by Acquirer for every merchant outlet
            VOPElement("Transaction.MerchantAcquirerBin", "3423432"),                   // 6 digit BIN assigned by the acquirer to the merchant
            VOPElement("Transaction.TransactionAmount", transactionAmount),             // Value in transaction currency with a dot delimiter
            VOPElement("Transaction.VipTransactionId", transaction.id),                 // IMPORTANT - Provides a numeric ID linking AUTH and SETTLE
            VOPElement("Transaction.VisaMerchantName", ""),                             // Visa assigned name of merchant. Note: Do not use for now
            VOPElement("Transaction.VisaMerchantId", ""),                               // Visa assigned numeric ID of merchant. Note: Do not use for now
            VOPElement("Transaction.VisaStoreName", ""),                                // Visa assigned ID for the specific outlet. Note: Do not use for now
            VOPElement("Transaction.VisaStoreId", ""),                                  // Visa assigned numeric ID for the outlet. Note: Do not use for now
            VOPElement("Transaction.CurrencyCodeNumeric", "840"),                       // Numeric ISO 4217 code for the currency
            VOPElement("Transaction.BillingCurrencyCode", "840"),                       // Numeric ISO 4217 code for the currency
            VOPElement("Transaction.USDAmount", transactionAmount),                     // IMPORTANT - Referenced in example but not documented
            VOPElement("Transaction.MerchantLocalPurchaseDate", merchantDate),          // The local date (no time) of the transaction.
            VOPElement("Transaction.MerchantGroup.0.Name", merchant.slug.uppercased()), // Merchant name, during the merchant on-boarding process.
            VOPElement("Transaction.MerchantGroup.0.ExternalId", merchant.prettyName),  // External MID or a name, during the merchant on-boarding process.
            VOPElement("Transaction.AuthCode", transaction.authCode),                   // An issuer generated value upon approving a transaction
            VOPElement("Transaction.PanLastFour", transaction.lastFour),                // The last 4 characters of the user’s card number
            VOPElement("Transaction.MerchantDateTimeGMT", transactionDate)              // The date time of the transaction in GMT
        ]
                
        let transactionTypeValue: String
        
        switch type {
        case .auth:
            messageElementsCollection.append(contentsOf: [
                VOPElement("Transaction.BillingAmount", transactionAmount),             // Amount the cardholder is billed for in their final statement
                VOPElement("Transaction.TimeStampYYMMDD", transactionDate),             // The date and time the transaction occurred
                VOPElement("Transaction.SettlementDate", ""),                           // Date which Visa settled with both the issuer and the acquirer
                VOPElement("Transaction.SettlementAmount", "0"),                        // Not used in AUTH
                VOPElement("Transaction.SettlementCurrencyCodeNumeric", "0"),           // Not used in AUTH
                VOPElement("Transaction.SettlementBillingAmount", "0"),                 // Not used in AUTH
                VOPElement("Transaction.SettlementBillingCurrency", ""),                // Not used in AUTH
                VOPElement("Transaction.SettlementUSDAmount", "0"),                     // Not used in AUTH
            ])
            transactionTypeValue = "AUTH"
            
        case .settlement:
            let settlementDate = transactionDateFormatter.string(from: Date())
            
            messageElementsCollection.append(contentsOf: [
                VOPElement("Transaction.BillingAmount", ""),                            // In SETTLE, the value will be null
                VOPElement("Transaction.TimeStampYYMMDD", "0001-01-01T00:00:00"),       // In SETTLE, the value will be “0001-01-01T00:00:00”.
                VOPElement("Transaction.SettlementDate", settlementDate),               // Date which Visa settled with both the issuer and the acquirer
                VOPElement("Transaction.SettlementAmount", transactionAmount),          // Value in transaction currency with a dot delimiter
                VOPElement("Transaction.SettlementCurrencyCodeNumeric", "826"),         // Numeric ISO 4217 code for the currency
                VOPElement("Transaction.SettlementBillingAmount", transactionAmount),   // Amount the cardholder is billed for with a dot delimiter
                VOPElement("Transaction.SettlementBillingCurrency", "826"),             // Numeric ISO 4217 code for the currency
                VOPElement("Transaction.SettlementUSDAmount", transactionAmount),       // Value of the transaction in USD
            ])
            transactionTypeValue = "SETTLE"
        }
        
        userDefinedFieldsCollection = [
            VOPElement("TransactionType", transactionTypeValue)
        ]
    }
}
